# -*- encoding: utf-8 -*-#appModules/avpui.py#A part of NonVisual Desktop Access (NVDA)#Copyright (C) 2006-2012 NVDA Contributors#This file is covered by the GNU General Public License.#See the file COPYING for more details.import appModuleHandlerimport apiimport controlTypes
from NVDAObjects.UIA import UIA, ListItemfrom NVDAObjects.behaviors import RowWithFakeNavigationimport configclass avpuia(UIA):	def _get_children(self):		l = list()		if self.firstChild:			obj = self.firstChild			while obj not in l:				l.append(obj)				try:					if obj.next:						obj = obj.next				except:					pass		return lclass avptablecell(UIA):	def _get_name(self):		l = list()		for x in self.children:			childname = x.name			childrole = x.role			if childname and childrole == controlTypes.ROLE_STATICTEXT:				l.append(childname) 		return ', '.join(l)	def _get_columnHeaderText(self):		colname1 = self.parent.parent.firstChild.getChild(self.columnNumber -1).name		if  colname1 != u'':			s =  colname1		else:			try:				colname2 =  self.parent.parent.firstChild.getChild(self.columnNumber -1).lastChild.previous.name			except:				colname2 = ''			s = colname2		return sclass avpcheckbox(UIA):	def _get_name(self):		l = list()		for x in self.children:			childname = x.name			if childname != '':				l.append(childname)		if len(l) == 0:			try:				l.append(self.next.name)			except AttributeError:				pass		return '; '.join(l)class avplistitem(ListItem):	def _get_name(self):		l = list()		if self.firstChild.role == controlTypes.ROLE_UNKNOWN:			obj = self.firstChild		else:			obj = self		for x in obj.children:			childname = x.name			childrole = x.role			if childrole == controlTypes.ROLE_STATICTEXT:				l.append(childname)		return '; '.join(l)class avpmenuitem(UIA):	def _get_name(self):		l = list()		s = ''		try:			name = self.name		except:			name = ''		try:			childname = self.firstChild.name		except:			childname = ''		for x in self.children:			if x.role == controlTypes.ROLE_STATICTEXT:				l.append(x.name)			childname = "; ".join(l)		if name != '':			s = name		elif childname != '':			s = childname		return sclass  avpunlabeledbutton(UIA):
	def script_prevobject(self, gesture):		try:			self.previous.setFocus()		except:			pass	def script_nextobject(self, gesture):		self.next.setFocus()	def initOverlayClass(self):		if self.parent.role == controlTypes.ROLE_UNKNOWN:			self.bindGesture("kb:control+leftArrow", "prevobject")			self.bindGesture("kb:control+rightArrow", "nextobject")	def _get_name(self):
		uiaid = self.UIAElement.CachedAutomationId		uianame = self.UIAElement.CurrentName		try:			firstchild = self.children[0].name		except:			firstchild = ''		try: 			thirdchild = self.children[1].next.name		except:			thirdchild = ''		if uianame != '':			s = uianame		elif uiaid != '':				s = uiaid		elif firstchild != '':			s = firstchild		elif thirdchild != '':			s = thirdchild		elif self.parent.role == controlTypes.ROLE_UNKNOWN:			try:				s = self.firstChild.next.name			except AttributeError:				s = ''		else:			s = ''		return s	def _get_description(self):
		uiadesc = self.UIAElement.CurrentHelpText		fallbackdesc = self.parent.firstChild.name		if uiadesc != '':			s = uiadesc		elif fallbackdesc != '':			s = fallbackdesc		elif self.parent.role == controlTypes.ROLE_UNKNOWN:			try:				s = self.firstChild.next.next.name			except AttributeError:				s = ''		else:			l = list()			for x in self.children:				childname = x.name				if childname != '':					l.append(childname)			try:				s = l[1]			except:				s = ''		return sclass avpdataitem(UIA, RowWithFakeNavigation):	def _get_name(self):		l = list()		for x in self.children:			childname = x.name			childheader = ''			if config.conf['documentFormatting']['reportTableHeaders']: childheader = x.columnHeaderText			if childname:				s = ''				if childheader:					s += childheader+': '				s += childname				l.append(s) 		return '; '.join(l)class AppModule(appModuleHandler.AppModule):	def chooseNVDAObjectOverlayClasses(self, obj, clslist):
		if isinstance(obj, UIA):			if obj.UIAElement.CachedFrameworkId == 'WPF':				if obj.role == controlTypes.ROLE_BUTTON:
					clslist.insert(0,avpunlabeledbutton)
				elif obj.role == controlTypes.ROLE_DATAITEM:					clslist.insert(0, avpdataitem)				elif obj.role == controlTypes.ROLE_LISTITEM:					clslist.insert(0, avplistitem)				elif obj.role == controlTypes.ROLE_MENUITEM:					clslist.insert(0,avpmenuitem)				elif obj.parent.role == controlTypes.ROLE_DATAITEM and obj.UIAElement.CachedClassName == 'ContentPresenter':					clslist.insert(0,avptablecell)				elif obj.role == controlTypes.ROLE_CHECKBOX and obj.name == u'':					clslist.insert(0,avpcheckbox)